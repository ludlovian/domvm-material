{"version":3,"file":"index.mjs","sources":["../src/util.js","../src/Button.js","../src/Card.js","../src/Icon.js","../src/Drawer.js","../src/LayoutGrid.js","../src/NotchedOutline.js","../src/Select.js","../src/TabBar.js","../src/TextField.js","../src/TopAppBar.js","../src/Typography.js"],"sourcesContent":["'use strict'\n\nlet _domvm\n\nexport function use (domvm) {\n  _domvm = domvm\n}\n\nexport function el (...args) {\n  return _domvm.defineElement(...args)\n}\n\nconst isPojo = o => o && o.constructor === Object\n\nexport function getArgs (args) {\n  const attrs = isPojo(args[0]) ? args.shift() : {}\n  let children\n  if (args.length !== 0) {\n    children = [].concat(...args)\n  }\n  return [attrs, children]\n}\n\nfunction shallowSame (a, b) {\n  return a && b && a.length === b.length && a.every((x, i) => b[i] === x)\n}\n\nexport function memoize (fn) {\n  let prev = {}\n  return (...args) => {\n    if (shallowSame(args, prev.args)) return prev.result\n    prev.args = args\n    prev.result = fn(...args)\n    return prev.result\n  }\n}\n","'use strict'\n\nimport { getArgs, memoize, el } from './util'\nimport { MDCRipple } from '@material/ripple'\nimport classnames from 'classnames'\n\nconst getHooks = memoize(ripple => {\n  if (!ripple) return {}\n  return {\n    // istanbul ignore next\n    didInsert (node) {\n      node.data = node.data || {}\n      node.data.mdcRipple = new MDCRipple(node.el)\n    },\n\n    // istanbul ignore next\n    willRecycle (prev, node) {\n      node.data = prev.data\n    },\n\n    // istanbul ignore next\n    willRemove (node) {\n      node.data.mdcRipple.destroy()\n    }\n  }\n})\n\nexport default function Button (...args) {\n  const [\n    {\n      ripple,\n      dense,\n      raised,\n      unelevated,\n      outlined,\n      primary,\n      secondary,\n      ...rest\n    },\n    children\n  ] = getArgs(args)\n  const cl = classnames(\n    rest.class,\n    'mdc-button',\n    dense && 'mdc-button--dense',\n    raised && 'mdc-button--raised',\n    unelevated && 'mdc-button--unelevated',\n    outlined && 'mdc-button--outlined',\n    primary && 'mdc-theme--primary-bg',\n    secondary && 'mdc-theme--secondary-bg'\n  )\n\n  return el(\n    rest.href ? 'a' : 'button',\n    {\n      ...rest,\n      class: cl,\n      _key: rest._key || rest.id || 'mdcButton',\n      _hooks: getHooks(ripple)\n    },\n    children\n  )\n}\n","'use strict'\n\nimport { MDCRipple } from '@material/ripple'\nimport classnames from 'classnames'\nimport Button from './Button'\nimport { getArgs, memoize, el } from './util'\n\nconst getHooks = memoize(ripple => {\n  if (!ripple) return {}\n  return {\n    // istanbul ignore next\n    didInsert (node) {\n      node.data = node.data || {}\n      node.data.mdcRipple = new MDCRipple(node.el)\n    },\n\n    // istanbul ignore next\n    willRecycle (prev, node) {\n      node.data = prev.data\n    },\n\n    // istanbul ignore next\n    willRemove (node) {\n      node.data.mdcRipple.destroy()\n    }\n  }\n})\n\nexport default function Card (...args) {\n  const [{ outlined, ripple, ...rest }, children] = getArgs(args)\n  const cl = classnames(\n    rest.class,\n    'mdc-card',\n    outlined && 'mdc-card--outlined'\n  )\n  return el(\n    'div',\n    {\n      ...rest,\n      class: cl,\n      _key: rest._key || rest.id || 'mdcCard',\n      _hooks: getHooks(ripple)\n    },\n    children\n  )\n}\n\nCard.Actions = (...args) => {\n  const [attrs, children] = getArgs(args)\n  return el('div.mdc-card__actions', attrs, children)\n}\n\nCard.ActionButton = (...args) => {\n  const [attrs, children] = getArgs(args)\n  return Button(\n    {\n      ...attrs,\n      class: classnames(attrs.class, 'mdc-card', 'mdc-card__action--button')\n    },\n    children\n  )\n}\n\nCard.ActionIcons = (...args) => {\n  const [attrs, children] = getArgs(args)\n  return el('div.mdc-card__action-icons', attrs, children)\n}\n\nCard.ActionIcon = (...args) => {\n  const [attrs, children] = getArgs(args)\n  return el(\n    'a.material-icons.mdc-icon-button.mdc-card__action.mdc-card__action--icon',\n    attrs,\n    children\n  )\n}\n","'use strict'\n\nimport { getArgs, el } from './util'\n\nexport default function Icon (...args) {\n  const [attrs, children] = getArgs(args)\n  return el('i.material-icons', attrs, children)\n}\n","'use strict'\n\nimport { getArgs, memoize, el } from './util'\nimport { MDCDrawer } from '@material/drawer'\nimport classnames from 'classnames'\nimport Icon from './Icon'\n\nconst getHooks = memoize((onOpen, onClose, open) => ({\n  // istanbul ignore next\n  didInsert (node) {\n    const data = (node.data = node.data || {})\n    const mdcDrawer = (data.mdcDrawer = new MDCDrawer(node.el))\n    if (onOpen) mdcDrawer.listen('MDCDrawer:opened', onOpen)\n    if (onClose) mdcDrawer.listen('MDCDrawer:closed', onClose)\n    if (open) {\n      data.monitor = open.map(v => {\n        mdcDrawer.open = v\n      })\n    }\n  },\n\n  // istanbul ignore next\n  willRecycle (prev, node) {\n    node.data = prev.data\n  },\n\n  // istanbul ignore next\n  willRemove (node) {\n    const { data } = node\n    const { mdcDrawer, monitor } = data\n    if (onOpen) mdcDrawer.unlisten('MDCDrawer:opened', onOpen)\n    if (onClose) mdcDrawer.unlisten('MDCDrawer:closed', onClose)\n    if (open) monitor.end(true)\n    mdcDrawer.destroy()\n  }\n}))\n\nexport default function Drawer (...args) {\n  const [{ open, onOpen, onClose, ...rest }, children] = getArgs(args)\n  return el('div.mdc-drawer-container', rest, [\n    el(\n      'aside.mdc-drawer.mdc-drawer--modal',\n      {\n        _key: rest._key || rest.id || 'mdcDrawer',\n        _hooks: getHooks(onOpen, onClose, open)\n      },\n      children\n    ),\n    el('div.mdc-drawer-scrim')\n  ])\n}\n\nDrawer.Header = (...args) => {\n  const [{ title, subtitle, ...rest }, children] = getArgs(args)\n  return el('div.mdc-drawer__header', rest, [\n    title && el('h3.mdc-drawer__title', title),\n    subtitle && el('h6.mdc-drawer__subtitle', subtitle),\n    children\n  ])\n}\n\nDrawer.Content = (...args) => {\n  const [attrs, children] = getArgs(args)\n  return el('.mdc-drawer__content', attrs, [el('nav.mdc-list', children)])\n}\n\nDrawer.Item = (...args) => {\n  const [{ selected, ...rest }, children] = getArgs(args)\n  return el(\n    'a.mdc-list-item',\n    {\n      ...rest,\n      class: classnames(rest.class, selected && 'mdc-list-item--activated')\n    },\n    children\n  )\n}\n\nDrawer.ItemIcon = (...args) => {\n  const [attrs, children] = getArgs(args)\n  return Icon(\n    {\n      ...attrs,\n      class: classnames(attrs.class, 'mdc-list-item__graphic')\n    },\n    children\n  )\n}\n\nDrawer.ItemText = (...args) => {\n  const [attrs, children] = getArgs(args)\n  return el('span.mdc-list-item--text', attrs, children)\n}\n","'use strict'\n\nimport { getArgs, el } from './util'\nimport classnames from 'classnames'\n\nexport default function LayoutGrid (...args) {\n  const [{ noInner, ...rest }, children] = getArgs(args)\n  return el(\n    '.mdc-layout-grid',\n    rest,\n    noInner ? children : [LayoutGrid.Inner(children)]\n  )\n}\n\nLayoutGrid.Inner = (...args) => {\n  const [attrs, children] = getArgs(args)\n  return el('div.mdc-layout-grid__inner', attrs, children)\n}\n\nLayoutGrid.Cell = (...args) => {\n  const [\n    { cols, desktopCols, tabletCols, phoneCols, order, align, ...rest },\n    children\n  ] = getArgs(args)\n  return el(\n    'div.layout-grid__cell',\n    {\n      ...rest,\n      class: classnames(\n        rest.class,\n        cols && `mdc-layout-grid__cell--span-${cols}`,\n        desktopCols && `mdc-layout-grid__cell--span-${desktopCols}-desktop`,\n        tabletCols && `mdc-layout-grid__cell--span-${tabletCols}-tablet`,\n        phoneCols && `mdc-layout-grid__cell--span-${phoneCols}-phone`,\n        order && `mdc-layout-grid__cell--order-${order}`,\n        align && `mdc-layout-grid__cell--align-${align}`\n      )\n    },\n    children\n  )\n}\n","'use strict'\n\nimport { getArgs, el } from './util'\nimport { MDCNotchedOutline } from '@material/notched-outline'\n\nconst hooks = {\n  // istanbul ignore next\n  didInsert (node) {\n    node.data = node.data || {}\n    node.data.mdcNotchedOutline = new MDCNotchedOutline(node.el)\n  },\n\n  // istanbul ignore next\n  willRecycle (prev, node) {\n    node.data = prev.data\n  },\n\n  // istanbul ignore next\n  willRemove (node) {\n    node.data.mdcNotchedOutline.destroy()\n  }\n}\n\nexport default function NotchedOutline (...args) {\n  const [attrs, children] = getArgs(args)\n  return el(\n    '.mdc-notched-outline',\n    {\n      ...attrs,\n      _key: attrs._key || attrs._id || 'mdcNotchedOutline',\n      _hooks: hooks\n    },\n    [\n      el('.mdc-notched-outline__leading'),\n      el('.mdc-notched-outline__notch', children),\n      el('.mdc-notched-outline__trailing')\n    ]\n  )\n}\n","'use strict'\n\nimport { getArgs, memoize, el } from './util'\nimport { MDCSelect } from '@material/select'\nimport NotchedOutline from './NotchedOutline'\nimport classnames from 'classnames'\n\nconst getHooks = memoize(onchange => ({\n  // istanbul ignore next\n  didInsert (node) {\n    node.data = node.data || {}\n    node.data.mdcSelect = new MDCSelect(node.el)\n    if (onchange) node.data.mdcSelect.listen('MDCSelect:change', onchange)\n  },\n\n  // istanbul ignore next\n  willRecycle (prev, node) {\n    node.data = prev.data\n  },\n\n  // istanbul ignore next\n  willRemove (node) {\n    if (onchange) node.data.mdcSelect.unlisten('MDCSelect:change', onchange)\n    node.data.mdcSelect.destroy()\n  }\n}))\n\nexport default function Select (...args) {\n  const [\n    {\n      class: cl,\n      id,\n      label,\n      disabled,\n      helperText,\n      persistent,\n      validationMsg,\n      onchange,\n      ...rest\n    },\n    children\n  ] = getArgs(args)\n\n  const selected =\n    children && children.find(node => node.attrs && node.attrs.selected)\n  const hasValue = selected && selected.attrs && selected.attrs.value\n\n  return el('div', { class: cl }, [\n    el(\n      '.mdc-select',\n      {\n        class: classnames(\n          label && 'mdc-select--outlined',\n          disabled && 'mdc-select--disabled'\n        ),\n        _hooks: getHooks(onchange),\n        _key: `${id}-mdc-select`\n      },\n      [\n        el('i.mdc-select__dropdown-icon'),\n        el(\n          'select.mdc-select__native-control',\n          {\n            ...rest,\n            id,\n            'aria-controls': helperText !== undefined && `${id}-helper-text`,\n            disabled\n          },\n          children\n        ),\n        label &&\n          NotchedOutline(\n            el(\n              'label.mdc-floating-label',\n              {\n                class: classnames(\n                  hasValue && 'mdc-floating-label--float-above'\n                ),\n                for: id\n              },\n              label\n            )\n          )\n      ]\n    ),\n\n    helperText !== undefined &&\n      el(\n        'p.mdc-select-helper-text',\n        {\n          class: classnames(\n            persistent && 'mdc-select-helper-text--persistent',\n            validationMsg && 'mdc-select-helper-text--validation-msg'\n          ),\n          'aria-hidden': 'true',\n          id: `${id}-helper-text`\n        },\n        helperText\n      )\n  ])\n}\n","'use strict'\n\nimport { getArgs, memoize, el } from './util'\nimport { MDCTabBar } from '@material/tab-bar'\nimport classnames from 'classnames'\n\nconst getHooks = memoize(onchange => ({\n  // istanbul ignore next\n  didInsert (node) {\n    const data = (node.data = node.data || {})\n    const mdcTabBar = (data.mdcTabBar = new MDCTabBar(node.el))\n    if (onchange) mdcTabBar.listen('MDCTabBar:activated', onchange)\n  },\n\n  // istanbul ignore next\n  willRecycle (prev, node) {\n    node.data = prev.data\n  },\n\n  // istanbul ignore next\n  willRemove (node) {\n    const { data } = node\n    const { mdcTabBar } = data\n    if (onchange) mdcTabBar.unlisten('MDCTabBar:activated', onchange)\n    mdcTabBar.destroy()\n  }\n}))\n\nexport default function TabBar (...args) {\n  const [{ onchange, id, ...rest }, children] = getArgs(args)\n  return el(\n    '.mdc-tab-bar',\n    {\n      ...rest,\n      _hooks: getHooks(onchange),\n      _key: id + '-mdc-tab-bar',\n      role: 'tablist'\n    },\n    [\n      el('.mdc-tab-scroller', [\n        el('.mdc-tab-scroller__scroll-area', [\n          el('.mdc-tab-scroller__scroll-content', children)\n        ])\n      ])\n    ]\n  )\n}\n\nTabBar.Tab = (...args) => {\n  const [{ active, ...rest }, children] = getArgs(args)\n  return el(\n    'button.mdc-tab',\n    {\n      ...rest,\n      class: classnames(rest.class, active && 'mdc-tab--active'),\n      role: 'tab',\n      'aria-selected': active,\n      tabindex: active ? '0' : '-1'\n    },\n    [\n      el('span.mdc-tab__content', children),\n      el(\n        'span.mdc-tab-indicator',\n        {\n          class: classnames(active && 'mdc-tab-indicator--active')\n        },\n        [\n          el(\n            'span.mdc-tab-indicator__content.mdc-tab-indicator__content--underline'\n          )\n        ]\n      ),\n      el('span.mdc-tab__ripple')\n    ]\n  )\n}\n\nTabBar.TabIcon = (...args) => {\n  const [attrs, children] = getArgs(args)\n  return el('span.material-icons.mdc-tab__icon', attrs, children)\n}\n\nTabBar.TabText = (...args) => {\n  const [attrs, children] = getArgs(args)\n  return el('span.mdc-tab__text-label', attrs, children)\n}\n","'use strict'\n\nimport { getArgs, el } from './util'\nimport { MDCTextField } from '@material/textfield'\nimport NotchedOutline from './NotchedOutline'\nimport classnames from 'classnames'\n\nconst hooks = {\n  // istanbul ignore next\n  willRecycle (prev, node) {\n    node.data = prev.data\n  },\n  // istanbul ignore next\n  didInsert (node) {\n    node.data = node.data || {}\n    node.data.mdcTextField = new MDCTextField(node.el)\n  },\n  // istanbul ignore next\n  willRemove (node) {\n    node.data.mdcTextField.destroy()\n  }\n}\n\nexport default function TextField (...args) {\n  const [\n    {\n      id,\n      type,\n      label,\n      disabled,\n      value,\n      helperText,\n      persistent,\n      validationMsg,\n      class: cl,\n      ...rest\n    }\n  ] = getArgs(args)\n\n  return el('div', { class: cl }, [\n    el(\n      '.mdc-text-field',\n      {\n        class: classnames(\n          label && 'mdc-text-field--outlined',\n          type === 'textarea' && 'mdc-text-field--textarea',\n          disabled && 'mdc-text-field--disabled'\n        ),\n        _hooks: hooks,\n        _key: id + '-mdc-text-field'\n      },\n      [\n        el(type === 'textarea' ? 'textarea' : 'input', {\n          ...rest,\n          class: 'mdc-text-field__input',\n          ...(type === 'textarea' ? {} : { type }),\n          value,\n          disabled,\n          id\n        }),\n        label &&\n          NotchedOutline(\n            el(\n              'label.mdc-floating-label',\n              {\n                class: classnames(value && 'mdc-floating-label--float-above'),\n                for: id\n              },\n              label\n            )\n          )\n      ]\n    ),\n    helperText !== undefined &&\n      el(\n        'p.mdc-text-field-helper-text',\n        {\n          class: classnames(\n            persistent && 'mdc-text-field-helper-text--persistent',\n            validationMsg && 'mdc-text-field-helper-text--validation-msg'\n          ),\n          'aria-hidden': 'true',\n          id: `${id}-helper-text`\n        },\n        helperText\n      )\n  ])\n}\n","'use strict'\n\nimport { getArgs, memoize, el } from './util'\nimport { MDCTopAppBar } from '@material/top-app-bar'\nimport classnames from 'classnames'\n\nconst getHooks = memoize(onNav => ({\n  // istanbul ignore next\n  didInsert (node) {\n    node.data = node.data || {}\n    node.data.mdcTopAppBar = new MDCTopAppBar(node.el)\n    if (onNav) node.data.mdcTopAppBar.listen('MDCTopAppBar:nav', onNav)\n  },\n  // istanbul ignore next\n  willRecycle (prev, node) {\n    node.data = prev.data\n  },\n  // istanbul ignore next\n  willRemove (node) {\n    if (onNav) node.data.mdcTopAppBar.unlisten('MDCTopAppBar:nav', onNav)\n    node.data.mdcTopAppBar.destroy()\n  }\n}))\n\nexport default function TopAppBar (...args) {\n  const [{ fixed, onNav, ...rest }, children] = getArgs(args)\n  return el(\n    'header.mdc-top-app-bar',\n    {\n      ...rest,\n      class: classnames(rest.class, fixed && 'mdc-top-app-bar--fixed'),\n      _key: rest._key || rest.id || 'mdcTopAppBar',\n      _hooks: getHooks(onNav)\n    },\n    children\n  )\n}\n\nTopAppBar.Row = (...args) => {\n  const [attrs, children] = getArgs(args)\n  return el('div.mdc-top-app-bar__row', attrs, children)\n}\n\nTopAppBar.Section = (...args) => {\n  const [{ alignStart, alignEnd, ...rest }, children] = getArgs(args)\n  return el(\n    'section.mdc-top-app-bar__section',\n    {\n      ...rest,\n      class: classnames(\n        rest.class,\n        alignStart && 'mdc-top-app-bar__section--align-start',\n        alignEnd && 'mdc-top-app-bar__section--align-end'\n      )\n    },\n    children\n  )\n}\n\nTopAppBar.Icon = (...args) => {\n  const [{ navigation, ...rest }, children] = getArgs(args)\n  return el(\n    'a.material-icons',\n    {\n      ...rest,\n      class: classnames(\n        rest.class,\n        navigation && 'mdc-top-app-bar__navigation-icon'\n      )\n    },\n    children\n  )\n}\n","'use strict'\n\nimport { getArgs, el } from './util'\nimport classnames from 'classnames'\n\nconst styles = [\n  'headline1',\n  'headline2',\n  'headline3',\n  'headline4',\n  'headline5',\n  'headline6',\n  'subtitle1',\n  'subtitle2',\n  'body1',\n  'body2',\n  'caption',\n  'button',\n  'overline'\n]\n\nexport default function Typography (...args) {\n  const [attrs, children] = getArgs(args)\n  return el(\n    'span',\n    {\n      class: classnames(\n        styles.map(name => {\n          if (attrs[name]) {\n            delete attrs[name]\n            return `mdc-typography--${name}`\n          }\n          return false\n        })\n      )\n    },\n    children\n  )\n}\n\nstyles.forEach(n => {\n  const name = n.replace(n[0], n[0].toUpperCase())\n  Typography[name] = (...args) => {\n    const [attrs, children] = getArgs(args)\n    return el('span.mdc-typography--' + n, attrs, children)\n  }\n})\n"],"names":["let","_domvm","use","domvm","el","defineElement","args","const","isPojo","o","constructor","Object","getArgs","children","attrs","shift","length","concat","ref","memoize","fn","prev","a","b","every","x","i","result","getHooks","ripple","didInsert","node","data","mdcRipple","MDCRipple","willRecycle","willRemove","destroy","Button","cl","classnames","rest","class","dense","raised","unelevated","outlined","primary","secondary","href","_key","id","_hooks","Card","Icon","Actions","ActionButton","ActionIcons","ActionIcon","onOpen","onClose","open","mdcDrawer","MDCDrawer","listen","monitor","map","v","unlisten","end","Drawer","LayoutGrid","noInner","Inner","Header","title","subtitle","Content","Item","selected","ItemIcon","ItemText","Cell","cols","desktopCols","tabletCols","phoneCols","order","align","hooks","mdcNotchedOutline","MDCNotchedOutline","NotchedOutline","_id","onchange","mdcSelect","MDCSelect","Select","find","hasValue","value","label","disabled","undefined","helperText","for","persistent","validationMsg","mdcTabBar","MDCTabBar","TabBar","role","Tab","active","tabindex","TabIcon","TabText","mdcTextField","MDCTextField","TextField","type","onNav","mdcTopAppBar","MDCTopAppBar","TopAppBar","fixed","Row","Section","alignStart","alignEnd","navigation","styles","Typography","name","forEach","n","replace","toUpperCase"],"mappings":"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"}